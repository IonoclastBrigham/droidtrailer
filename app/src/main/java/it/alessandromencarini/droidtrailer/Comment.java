package it.alessandromencarini.droidtrailer;

import it.alessandromencarini.droidtrailer.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table COMMENT.
 */
public class Comment {

    private Long id;
    private String userAvatarUrl;
    private String body;
    private String userLogin;
    private String url;
    private java.util.Date createdAt;
    private long pullRequestId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CommentDao myDao;

    private PullRequest pullRequest;
    private Long pullRequest__resolvedKey;


    // KEEP FIELDS - put your custom fields here

    private Boolean mMarkedForDestruction = false;

    // KEEP FIELDS END

    public Comment() {
    }

    public Comment(Long id) {
        this.id = id;
    }

    public Comment(Long id, String userAvatarUrl, String body, String userLogin, String url, java.util.Date createdAt, long pullRequestId) {
        this.id = id;
        this.userAvatarUrl = userAvatarUrl;
        this.body = body;
        this.userLogin = userLogin;
        this.url = url;
        this.createdAt = createdAt;
        this.pullRequestId = pullRequestId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCommentDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getUserAvatarUrl() {
        return userAvatarUrl;
    }

    public void setUserAvatarUrl(String userAvatarUrl) {
        this.userAvatarUrl = userAvatarUrl;
    }

    public String getBody() {
        return body;
    }

    public void setBody(String body) {
        this.body = body;
    }

    public String getUserLogin() {
        return userLogin;
    }

    public void setUserLogin(String userLogin) {
        this.userLogin = userLogin;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public java.util.Date getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(java.util.Date createdAt) {
        this.createdAt = createdAt;
    }

    public long getPullRequestId() {
        return pullRequestId;
    }

    public void setPullRequestId(long pullRequestId) {
        this.pullRequestId = pullRequestId;
    }

    /** To-one relationship, resolved on first access. */
    public PullRequest getPullRequest() {
        long __key = this.pullRequestId;
        if (pullRequest__resolvedKey == null || !pullRequest__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PullRequestDao targetDao = daoSession.getPullRequestDao();
            PullRequest pullRequestNew = targetDao.load(__key);
            synchronized (this) {
                pullRequest = pullRequestNew;
            	pullRequest__resolvedKey = __key;
            }
        }
        return pullRequest;
    }

    public void setPullRequest(PullRequest pullRequest) {
        if (pullRequest == null) {
            throw new DaoException("To-one property 'pullRequestId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.pullRequest = pullRequest;
            pullRequestId = pullRequest.getId();
            pullRequest__resolvedKey = pullRequestId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here

    public Boolean getMarkedForDestruction() {
        return mMarkedForDestruction;
    }

    public void setMarkedForDestruction(Boolean markedForDestruction) {
        mMarkedForDestruction = markedForDestruction;
    }

    @Override
    public boolean equals(Object o) {
        if (getClass() != o.getClass())
            return false;

        Comment otherComment = (Comment)o;
        return id.equals(otherComment.getId());
    }

    // KEEP METHODS END

}
